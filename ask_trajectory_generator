#include<iostream>
#include<math.h>
using namespace std;

class new_cmd
{

private:
	double Displacement;      //位移
	double Speed;             //速度
	double Acceleration;      // 加速度
	double Deceleration;      //减速度
	int  T1;                 //加速的时间
	int  T2;				 //匀速行驶时间
	int T3;                 //减速的时间
	bool Done;              //到达标记
public:
	void Assignment(double, double, double, double, int, int, int);
	double GetDisplacement();
	double GetAcceleration();
	double GetDeceleration();
	double GetSpeed();
	int GetT1();
	int GetT2();
	int GetT3();

};

void new_cmd::Assignment(double displacement, double acceleration, double deceleration,
	double speed, int t1, int t2, int t3)
{
	Displacement= displacement; Acceleration = acceleration; Deceleration = deceleration; 
	Speed = speed; T1 = t1; T2 = t2; T3 = t3;
}

double new_cmd::GetDisplacement()
{
	return(Displacement);
}
double new_cmd::GetAcceleration()
{
	return(Acceleration);
}
double new_cmd::GetDeceleration()
{
	return(Deceleration);
}
double new_cmd::GetSpeed()
{
	return(Speed);
}
int new_cmd::GetT1()
{
	return(T1);
}
int new_cmd::GetT2()
{
	return(T2);
}
int new_cmd::GetT3()
{
	return(T3);
}

void main()
{
	double Input_Displacement = 0;    //初始化位移为零
	double Input_Acceleration;        // 加速度
	double Input_Deceleration;        //减速度
	double Input_Speed = 0;               //速度
	int Input_T1;                   //加速的时间
	int Input_T2;				    //匀速行驶时间
	int Input_T3;                     //减速的时间
	cout << "*******************task_trajectory_generator*******************"<< '\n';	
	cout << "                    Initializing                               "<< '\n';
	while (1)
	{
		cout << "                 Receiving new_cmd                        " << '\n';
		cout << " Please input acceleration,deceleration and time                   " << '\n';
		cin >> Input_Acceleration >> Input_Deceleration >> Input_T1 >> Input_T2 >> Input_T3;
		new_cmd new_order;
		new_order.Assignment(Input_Displacement, Input_Acceleration, Input_Deceleration, Input_Speed, Input_T1, Input_T2, Input_T3);
		int t1 = 0 ;
		double Speed_new;
		double Displacement_new;

		while(t1 <= new_order.GetT1())       //加速过程
			{
				Speed_new = new_order.GetSpeed() + t1*new_order.GetAcceleration();
				Displacement_new = new_order.GetDisplacement() + 0.5*new_order.GetAcceleration()*t1*t1;
				cout << "whent=" << t1 << "，" << "Speed：" << Speed_new << "   Displacement：" << Displacement_new << '\n';
				t1++;
			}

		while (t1 <= new_order.GetT1() + new_order.GetT2())       //匀速过程
		{
			Speed_new = Speed_new;
			Displacement_new = Displacement_new;
			cout << "whent=" << t1 << "，" << "Speed：" << Speed_new << "   Displacement：" << Displacement_new << '\n';
			t1++;
		}		

		double sp = Speed_new;
		double sd = Displacement_new;
		while ( t1 <= ( new_order.GetT1() + new_order.GetT2() + new_order.GetT3() ) )        //减速过程
		{
			Speed_new = sp - (t1 - new_order.GetT1() - new_order.GetT2())*new_order.GetDeceleration();
			Displacement_new = sd - 0.5*new_order.GetDeceleration()*(t1 - new_order.GetT1()
				- new_order.GetT2())*(t1 - new_order.GetT1() - new_order.GetT2());
			cout << "whent=" << t1 << "，" << "Speed：" << Speed_new << "   Displacement：" << Displacement_new << '\n';
			t1++;
		}

	};


}
